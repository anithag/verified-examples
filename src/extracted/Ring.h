/* 
  This file was generated by KreMLin <https://github.com/FStarLang/kremlin>
  KreMLin invocation: krml -verify -bundle WasmSupport -no-prefix Ring ../Ring.fst
  F* version: b55bb590
  KreMLin version: 2f843633
 */

#include "kremlib.h"
#ifndef __Ring_H
#define __Ring_H




void host_memory_region();

void enclave_memory_region();

int8_t read_host_memory(int8_t *host_buffer, uint32_t addr);

uint32_t incr_ht(uint32_t ht, uint32_t rsize);

int32_t *create_host_memory__int32_t(int32_t init1, uint32_t size);

int32_t *create_enclave_memory__int32_t(int32_t init1, uint32_t size);

typedef struct ringstruct__int32_t_s
{
  int32_t *rbuf;
  uint32_t head;
  uint32_t tail;
  uint32_t rsize;
}
ringstruct__int32_t;

bool is_rb_full__int32_t(ringstruct__int32_t r);

typedef struct K___Ring_ringstruct__int32_t_bool_s
{
  ringstruct__int32_t fst;
  bool snd;
}
K___Ring_ringstruct__int32_t_bool;

K___Ring_ringstruct__int32_t_bool push__int32_t(ringstruct__int32_t r, int32_t v1);

bool is_rb_empty__int32_t(ringstruct__int32_t r);

#define Error 0
#define Value 1

typedef uint8_t option__int32_t_tags;

typedef struct option__int32_t_s
{
  option__int32_t_tags tag;
  int32_t v;
}
option__int32_t;

typedef struct K___Ring_ringstruct__int32_t_Ring_option__int32_t_s
{
  ringstruct__int32_t fst;
  option__int32_t snd;
}
K___Ring_ringstruct__int32_t_Ring_option__int32_t;

K___Ring_ringstruct__int32_t_Ring_option__int32_t pop__int32_t(ringstruct__int32_t r);

option__int32_t test_ringbuffer();

int32_t main();

#define __Ring_H_DEFINED
#endif
